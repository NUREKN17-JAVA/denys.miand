As of version 0.3.6 and the upgrade to Struts 1.2.7 the semantics of the methods 
getActionErrors and getActionMessages in ActionTestModule have been changed to 
return the union of request and session messages. In older versions, these methods 
only returned request messages or session messages.
Please note that you are unaffected of this change if you do not store messages in
the session or use Struts 1.1, which only stores messages in the request.

Beginning with version 0.3.5, the mock objects for struts are created in a subclass
of WebMockObjectFactory named ActionMockObjectFactory (WebMockObjectFactory
is now independent from Struts). This causes some incompatibilities with
previous versions. In your struts test cases, just replace WebMockObjectFactory
with ActionMockObjectFactory. Also use the getActionMockObjectFactory and
createActionMockObjectFactory methods from BaseTestCase in your struts test 
cases. In the servlet and tag test cases, you can leave WebMockObjectFactory
or alternatively use ActionMockObjectFactory (if these test cases also use struts).
The created WebMockObjectFactory of BaseTestCase is actually the ActionMockObjectFactory,
there is only one instance. The purpose of this refactoring is to provide a web mock 
object factory that is independent from struts and can be used without having 
struts.jar in the classpath.

Reorganized package structure of util classes. XmlUtil is now in com.mockrunner.util.web
package, the other util classes are in com.mockrunner.util.common package. Except for
XmlUtil, these classes are not meant for application use, so it is unlikely that you are
affected by this refactoring.


Older API changes:

Starting with version 0.3.1, Mockrunner supports the MockEJB 0.6 API
and the new features of MockEJB.

If you don't use the EJBTestModule and do not test JMS code with
message driven beans, everything should be fine.

Otherwise, please consider the following changes:

- MockEJB 0.6 deprecates the use of MockEjbObject in favor of the new
  interceptor framework. The MockContainer.deploy methods no longer
  return the MockEjbObject. For this reason, EJBTestModule.deploy
  methods do not return this object as well. Please refer to
  the MockEJB documentation on http://www.mockejb.org
  
- MockEJB 0.6 supports session beans, entity beans and message driven
  beans and provides a descriptor for each of these bean types.
  You can deploy each bean type using the EJBTestModule API. There
  is a generic deploy method and special deploySessionBean, deployEntityBean
  and deployMessageBean methods. The deploy method for session beans was
  renamed to deploySessionBean. If you use this method, you have to change
  the name. However, parameters are the same.
  
- The methods lookupBean in EJBTestModule are deprecated (but not removed)
  and renamed to createBean in order to point out that the EJBs are actually created 
  and not just looked up. There are new createEntityBean methods which do exactly
  the same but also add the EJB to the MockEJB entity database.
  
- Major changes affect message driven beans. If you use the Mockrunner JMS
  test framework without message driven beans, you should not be affected
  by the changes. Message driven beans are now deployed using the method
  EJBTestModule.deployMessageBean. You have to provide JNDI names, factory
  and destination objects and an instance of the message driven bean.
  The provided objects are automatically bound to the JNDI context. The
  mock container creates a session with a proper receiver and registers
  the provided bean. The method JMSTestModule.registerTestMessageListener
  is no longer necessary. Please check out the modified version of
  com.mockrunner.example.jms.PrintSessionBeanTest for an example.
  The PrintSessionBeanTest also shows how to test message driven beans
  without deploying the bean to the mock container.
  
Starting with version 0.3, Mockrunner includes and supports Struts 1.2.
Struts 1.1 is still supported. The struts.jar library and all other libraries
from Struts release (refer to readme.txt) were upgraded to the versions included
in Struts 1.2. If you want to test applications using Struts 1.1, just replace
all the jar files with the versions that ship with Struts 1.1 release.

However, a few things may affect your Struts tests:

- Struts 1.2 can store action errors and messages in the request and the session.
  The methods ActionTestModule.getActionErrors and ActionTestModule.getActionMessages 
  check the request and the session for errors resp. messages objects by default. 
  Struts 1.1 stores these objects in the request, so this should not affect your tests. 
  You can disable this behavior by calling ActionTestModule.setRecognizeMessagesInSession(false).
  If this property is set to false, errors and messages in the session are not recognized.

- Struts 1.2 deprecates the use of ActionErrors objects in favor of ActionMessages.
  The method ActionTestModule.getActionErrors now returns an ActionMessages object.
  ActionTestModule.getActionErrorByKey now returns an ActionMessage object. This
  is necessary, because Struts 1.2 stores ActionMessages instead of ActionErrors.
  If you are using Struts 1.1 you can cast these objects to ActionErrors if necessary.
  